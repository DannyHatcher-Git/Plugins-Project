/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SoundPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var SoundSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Heading 2" });
    new import_obsidian.Setting(containerEl).setName("Setting Name").setDesc("A description").addText((text) => text.setValue(this.plugin.settings.mySetting).setPlaceholder("Placeholder text").onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: ""
};
var SoundPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("volume-2", "Sounds Plugin", (evt) => {
      new import_obsidian2.Notice("You played a sound");
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("\u{1F50A}");
    this.addSettingTab(new SoundSettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBTb3VuZFNldHRpbmdUYWIgfSBmcm9tICdzZXR0aW5ncyc7XHJcblxyXG5pbnRlcmZhY2UgU291bmRTZXR0aW5ncyB7XHJcblx0bXlTZXR0aW5nOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFNvdW5kU2V0dGluZ3MgPSB7XHJcblx0bXlTZXR0aW5nOiAnJ1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb3VuZFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0c2V0dGluZ3M6IFNvdW5kU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0Ly8gSWNvbiBpbiB0aGUgbGVmdCByaWJib24uXHJcblx0XHRjb25zdCByaWJib25JY29uRWwgPSB0aGlzLmFkZFJpYmJvbkljb24oJ3ZvbHVtZS0yJywgJ1NvdW5kcyBQbHVnaW4nLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XHJcblx0XHRcdC8vIFBvcCB1cCB3aGVuIGNsaWNrZWQuXHJcblx0XHRcdG5ldyBOb3RpY2UoJ1lvdSBwbGF5ZWQgYSBzb3VuZCcpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gU3RhdHVzIGJhciBpdGVtLiBEb2VzIG5vdCB3b3JrIG9uIG1vYmlsZSBhcHBzLlxyXG5cdFx0Y29uc3Qgc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcblx0XHRzdGF0dXNCYXJJdGVtRWwuc2V0VGV4dCgnXHVEODNEXHVERDBBJyk7XHJcblx0XHRcclxuXHRcdC8vIEFkZHMgc2V0dGluZ3MgdGFiLlxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTb3VuZFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHQvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC4gPz9cclxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gY29uc29sZS5sb2coJ3NldEludGVydmFsJyksIDUgKiA2MCAqIDEwMDApKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cclxuXHR9XHJcblx0Ly8gPz9cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblx0Ly8gPz9cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuIiwgImltcG9ydCBTb3VuZFBsdWdpbiBmcm9tIFwibWFpblwiO1xyXG5pbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTb3VuZFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFNvdW5kUGx1Z2luO1xyXG5cdC8vID8/XHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogU291bmRQbHVnaW4pIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHRcdC8vIFByZXZlbnRzIGFkZGVkIGNvbnRhaW5lcnMgb24gb3Blbi5cclxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblx0XHQvLyBBZGRzIGluZm9ybWF0aW9uLlxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdIZWFkaW5nIDInfSk7XHJcblxyXG5cdFx0Ly8gQWRkcyBsaW5lLiBUaGVuIGluZm9ybWF0aW9uLlx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0Ly8gQWRkcyBuYW1lIGFuZCBkZXNjcmlwdGlvbi5cclxuXHRcdFx0LnNldE5hbWUoJ1NldHRpbmcgTmFtZScpXHJcblx0XHRcdC5zZXREZXNjKCdBIGRlc2NyaXB0aW9uJylcclxuXHRcdFx0Ly8gQWRkcyBpbnB1dCBib3guXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC8vIENyZWF0ZXMgYSB2YWx1ZSB0byBzYXZlIGluZm9ybWF0aW9uLlxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmcpXHJcblx0XHRcdFx0Ly8gUGxhY2Vob2xkZXIgdGV4dC5cclxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ1BsYWNlaG9sZGVyIHRleHQnKVxyXG5cdFx0XHRcdC8vIFdoZW4gdGV4dCBpcyBjaGFuZ2VkIHRyaWdnZXIuXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gQ2hhbmdlIHRoZSBteVNldHRpbmcgdmFsdWUuXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmcgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdC8vID8/XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSlcclxuXHR9XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQTRGOzs7QUNDNUYsc0JBQStDO0FBRXhDLElBQU0sa0JBQU4sY0FBOEIsaUNBQWlCO0FBQUEsRUFHckQsWUFBWSxLQUFVLFFBQXFCO0FBQzFDLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUNHLFVBQWdCO0FBQ2xCLFVBQU0sRUFBQyxnQkFBZTtBQUV0QixnQkFBWSxNQUFNO0FBRWxCLGdCQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU0sWUFBVyxDQUFDO0FBRzlDLFFBQUksd0JBQVEsV0FBVyxFQUVyQixRQUFRLGNBQWMsRUFDdEIsUUFBUSxlQUFlLEVBRXZCLFFBQVEsVUFBUSxLQUVmLFNBQVMsS0FBSyxPQUFPLFNBQVMsU0FBUyxFQUV2QyxlQUFlLGtCQUFrQixFQUVqQyxTQUFTLE9BQU8sVUFBVTtBQUUxQixXQUFLLE9BQU8sU0FBUyxZQUFZO0FBRWpDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7OztBRDdCQSxJQUFNLG1CQUFrQztBQUFBLEVBQ3ZDLFdBQVc7QUFDWjtBQUVBLElBQXFCLGNBQXJCLGNBQXlDLHdCQUFPO0FBQUEsRUFHL0MsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFHeEIsVUFBTSxlQUFlLEtBQUssY0FBYyxZQUFZLGlCQUFpQixDQUFDLFFBQW9CO0FBRXpGLFVBQUksd0JBQU8sb0JBQW9CO0FBQUEsSUFDaEMsQ0FBQztBQUdELFVBQU0sa0JBQWtCLEtBQUssaUJBQWlCO0FBQzlDLG9CQUFnQixRQUFRLFdBQUk7QUFHNUIsU0FBSyxjQUFjLElBQUksZ0JBQWdCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFHdEQsU0FBSyxpQkFBaUIsT0FBTyxZQUFZLE1BQU0sUUFBUSxJQUFJLGFBQWEsR0FBRyxJQUFJLEtBQUssR0FBSSxDQUFDO0FBQUEsRUFDMUY7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
